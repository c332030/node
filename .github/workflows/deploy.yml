
name: deploy

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
      node-version-file:
        required: false
        type: string
        default: package.json
      pnpm-version:
        required: false
        type: string
        default: latest
      origin-path:
        required: false
        type: string
        default: build
      remote-path:
        required: true
        type: string
      prepare-command:
        required: false
        type: string
      build-command:
        required: false
        type: string
        default: npm i && npm run build
      action-command:
        required: false
        type: string
      multi-module:
        required: false
        type: string
      artifact-path:
        required: false
        type: string
      version-command:
        required: false
        type: string
      commit-build:
        required: false
        type: string
        default: false
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      HOST:
        required: true
      PORT:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json','**/package-lock.json', '**/pnpm-lock.yaml') }}
          path: |
            node_modules
      - name: package-manager
        run: |
          PACKAGE_MANAGER=$(node -e "process.argv[1].split(' ')[0]" "${{ inputs.build-command }}}")
          echo "PACKAGE_MANAGER=${PACKAGE_MANAGER}" >> $GITHUB_ENV
      - name: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          node-version-file: ${{ inputs.node-version-file }}
          cache: ${{ env.PACKAGE_MANAGER }}
      - name: setup-pnpm
        if: ${{ 'pnpm' == env.PACKAGE_MANAGER }}
        uses: pnpm/action-setup@v4
        with:
          version: ${{ inputs.pnpm-version }}
      - name: build
        run: ${{ inputs.build-command }}
      - name: version
        if: ${{ inputs.version-command != '' }}
        run: |
          version=v$(${{ inputs.version-command }})
          echo "VERSION=${version}" >> $GITHUB_ENV
      - name: commit-build
        if: ${{ inputs.commit-build && env.VERSION != '' }}
        run: |
          git config --local user.email c332030-github-action-bot@c332030.com
          git config --local user.name c332030-github-action-bot
          git status
          git add .
          git commit -am "chore: ${{ env.VERSION }} [skip ci]"
          git push
        continue-on-error: true
      - id: artifact-name
        name: artifact-name
        run: |
          version=${{ env.VERSION }}
          echo "ARTIFACT_NAME=${{ github.event.repository.name }}.${{ github.ref_name }}.${version:-${{ github.run_id }}}" >> $GITHUB_ENV
      - name: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.artifact-path || inputs.origin-path }}
          retention-days: 7
      - name: init-ssh-pre
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh-pre.sh | sudo sh
      - name: init-ssh
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh.sh | sh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: deploy
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/deploy/deploy.sh | sh
        timeout-minutes: 2
        env:
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}
          ORIGIN_PATH: ${{ inputs.origin-path }}
          REMOTE_PATH: ${{ inputs.remote-path }}
          PREPARE_COMMAND: ${{ inputs.prepare-command }}
          ACTION_COMMAND: ${{ inputs.action-command }}
          MULTI_MODULE: ${{ inputs.multi-module }}
      - name: init-ssh-clean
        if: ${{ always() }}
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh-clean.sh | sh
